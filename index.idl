[meta title:"idyll-p5" description:"Short description of your project" /]

[Header
  title:"idyll-p5"
  subtitle:"Embed p5.js sketches in idyll!"
  author:"Job van der Zwan"
  authorLink:"https://github.com/JobLeonard/idyll-p5" /]

Embed [p5js sketches](https://p5js.org/) (relatively) easily in idyll with this custom component! Source code for the component and this page [in this github repository](https://github.com/JobLeonard/idyll-p5)

[Sketch webGL:1 ratio:1 sketch:"
  p5.draw = () => {
    const frame = p5.frameCount;
    p5.background(250);
    p5.rotateY(frame * 0.01);

    for(var j = 0; j < 5; j++){
      p5.push();
      for(var i = 0; i < 80; i++){
        p5.translate(
          p5.sin(frame * 0.001 + j) * 100,
          p5.sin(frame * 0.001 + j) * 100,
          i * 0.1
        );
        p5.rotateZ(frame * 0.002);
        p5.push();
        p5.sphere(8, 6, 4);
        p5.pop();
      }
      p5.pop();
    }
  }
" /]

```js
[Sketch webGL:1 ratio:1 sketch:"
  p5.draw = () => {
    const frame = p5.frameCount;
    p5.background(250);
    p5.rotateY(frame * 0.01);

    for(var j = 0; j < 5; j++){
      p5.push();
      for(var i = 0; i < 80; i++){
        p5.translate(
          p5.sin(frame * 0.001 + j) * 100,
          p5.sin(frame * 0.001 + j) * 100,
          i * 0.1
        );
        p5.rotateZ(frame * 0.002);
        p5.push();
        p5.sphere(8, 6, 4);
        p5.pop();
      }
      p5.pop();
    }
  }
" /]
```

(WebGL example taken from [p5js examples website](https://p5js.org/examples/3d-sine-cosine-in-3d.html))

**NOTE: p5js relies on the browser's** `window` **object to work, so to use the library with idyll you have to turn off server-side rendering!** Just pass `-r` as a flag to the `idyll` command - don't forget to edit your `npm start/build` scripts too!

The component uses p5's [instance mode](https://github.com/processing/p5.js/wiki/Global-and-instance-mode), but there are a few subtle differences, and a few added conveniences to play nice with idyll.

- The code for a sketch is passed as a string representing the *function body* of an instance mode sketch. So:

```js
function sketch(p5){

  p5.setup = () => { /* setup code */  };

  p5.draw = () => { /* draw code */ };

  // etc.
}
```

Becomes:

```
[Sketch sketchFun:"
  p5.setup = () => {
    /**
     * setup code.
     * DO NOT USE createCanvas here!
     * See below for explanation
     */
  };

  p5.draw = () => { /* draw code */ };

  // etc.
" /]
```

**IMPORTANT: DO NOT USE** `createCanvas` **in p5.setup!** The size depends on the container that holds the sketch, and the Sketch component handles this logic. This is explained in more detail below, at *Overriding size and ratio*.

The sketch unmounts and resets in response to resize events, making sure it stays the correct size. If the sketch needs to run special code before unmounting the component, define a `p5.unmount` function. If will be triggered just before the component unmounts. You can also pass a `watchedVal` to the Sketch component, which will trigger a reset whenever it changes (see below under *Manually triggered resets*)

The function body does not have access to the global browser scope, so it is passed a number of variables (which you can set through idyll) to help a little bit with that:

  - `width` and `height`, which work like the normal p5 width/height. Note that this means you can use them before `setup()`.
  - `sketchProps`, which can be used to pass idyll variables to the sketch. One can also define a `p5.receiveProps(sketchProps)` function in the sketch to handle any props being passed later.
  - `updates`, a function that can be called to broadcast variables back to idyll.
  - `devicePixelRatio`, which matches `window.devicePixelRatio`. Useful in case you want to respond to zoom- or high density display-related effect on the pixels.


By default, the sketch is as wide as the text, and has a 2:1 ratio. You can override this in a number of ways, see *"Overriding size and ratio"* below.


Try resizing the browser window to less than the size of the sketch!

[var name:"exampleVar" value:5 /]
[var name:"sketchDemo" value:"
  let value = sketchProps.value;
  p5.setup = () => {
    // no createCanvas required!
  }

  p5.draw = () => {
    p5.fill(value, 16);
    p5.noStroke();
    p5.rect(0, 0, width, height);
    p5.stroke((value + 128) % 256);
    p5.strokeWeight((2 + value)/4);
    p5.line(p5.mouseX, p5.mouseY, p5.pmouseX, p5.pmouseY);
  };

  p5.receiveProps = (sketchProps) => {
    value = sketchProps.value;
  };

  p5.unmount = () => {
    console.log('The sketch was unmounted. Width was ' +
    width + ', height was ' + height);
  }
" /]

[Sketch
  sketchProps:`{value: exampleVar}`
  sketch:sketchDemo /]

[Range min:0 max:255 value:exampleVar /]

Code for the above demo:

```
[var name:"exampleVar" value:5 /]
[var name:"sketchDemo" value:"
  let value = sketchProps.value;
  p5.setup = () => {
    // no createCanvas required!
  }

  p5.draw = () => {
    p5.fill(value, 16);
    p5.noStroke();
    p5.rect(0, 0, width, height);
    p5.stroke((value + 128) % 256);
    p5.strokeWeight((2 + value)/4);
    p5.line(p5.mouseX, p5.mouseY, p5.pmouseX, p5.pmouseY);
  };

  p5.receiveProps = (sketchProps) => {
    value = sketchProps.value;
  };

  p5.unmount = () => {
    console.log('The sketch was unmounted. Width was ' +
    width + ', height was ' + height);
  }
" /]

[Sketch
  ratio:`16/9`
  sketchProps:`{value: exampleVar}`
  sketch:sketchDemo /]

[Range min:0 max:255 value:exampleVar /]
```

# Overriding size and ratio

By default, the width of the sketch is equal to the available space in the text, and height will be half of the width.

You can pass a value to `width` and `height` to override this. The value can be the number of pixels like `100`, or a CSS-valid string like `"50%"` or `"2em".

Note: by default, height depends on width, but width does not depend on height. Passing a value to `width` will make `height` half of the new width. Passing a value to `height` will not affect `width`, which will still be as wide as the text.

To enforce a ratio, you can pass a number to `ratio`, i.e. `ratio:\`3/1\`` will produce a sketch with a width three times that of the height, and if `height` is defined but `width` is not, the width will depend on height.

 If no width is defined, but a height is, width depends on height (as you can see below, this part is still a bit buggy). If a ratio, width and height are defined, height is overridden to depend on width.

[var name:"sketch_ratio" value:"
  p5.setup = () => {
    p5.noLoop();
  };

  p5.draw = () => {
    p5.background(0);
  };
" /]

[Sketch
  sketch:sketch_ratio /]

[Sketch
  ratio:`4/1`
  sketch:sketch_ratio /]

[Sketch
  height:50
  sketch:sketch_ratio /]

[Sketch
  ratio:`2/1`
  width:"50%"
  sketch:sketch_ratio /]

[Sketch
  ratio:`2/1`
  width:200
  height:200
  sketch:sketch_ratio /]

[Sketch
  ratio:`2/1`
  height:50
  sketch:sketch_ratio /]

```
[var name:"sketch_ratio" value:"
  return function (p5) {
    p5.setup = () => {
      p5.noLoop();
    };

    p5.draw = () => {
      p5.background(0);
    };
  }
" /]

[Sketch
  sketch:sketch_ratio /]

[Sketch
  ratio:`4/1`
  sketch:sketch_ratio /]

[Sketch
  height:50
  sketch:sketch_ratio /]

[Sketch
  ratio:`2/1`
  width:"50%"
  sketch:sketch_ratio /]

[Sketch
  ratio:`2/1`
  width:200
  height:200
  sketch:sketch_ratio /]

[Sketch
  ratio:`2/1`
  height:50
  sketch:sketch_ratio /]
```

# Manually triggered resets
A `watchedVal` triggers a reset of the sketch whenever the value it watches is changed:
[var name:"resetSketch" value:0 /]
[var name:"sketch_reset" value:"
  let x = width/2, y = height/2, dx = 0;

  p5.draw = () => {
    p5.fill(0, 4);
    p5.noStroke();
    p5.rect(0, 0, width, height);
    p5.stroke(256);
    const dx_scaled = dx / (1<<4);
    p5.strokeWeight(20 + dx_scaled);
    p5.line(x, y, x+dx_scaled, y);
    x = (x+dx_scaled)%width;
    p5.line(x-dx_scaled, y, x, y);
    dx++;
  };
" /]

[Sketch
  height:100
  watchedVal:resetSketch
  sketch:sketch_reset /]
[Button onClick:`resetSketch++`]Reset Sketch![/Button]

```
[var name:"resetSketch" value:0 /]
[var name:"sketch_reset" value:"
  let x = width/2, y = height/2, dx = 0;

  p5.draw = () => {
    p5.fill(0, 4);
    p5.noStroke();
    p5.rect(0, 0, width, height);
    p5.stroke(256);
    const dx_scaled = dx / (1<<4);
    p5.strokeWeight(20 + dx_scaled);
    p5.line(x, y, x+dx_scaled, y);
    x = (x+dx_scaled)%width;
    p5.line(x-dx_scaled, y, x, y);
    dx++;
  };
" /]

[Sketch
  height:100
  watchedVal:resetSketch
  sketch:sketch_reset /]
[Button onClick:`resetSketch++`]Reset Sketch![/Button]

```