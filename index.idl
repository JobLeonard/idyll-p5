[meta title:"idyll-p5" description:"Short description of your project" /]

[Header
  title:"idyll-p5"
  subtitle:"Embed p5.js sketches in idyll!"
  author:"Job van der Zwan"
  authorLink:"https://github.com/JobLeonard/idyll-p5" /]

Embed [p5js sketches](https://p5js.org/) (relatively) easily in idyll with this custom component! Source code for the component and this page [in this github repository](https://github.com/JobLeonard/idyll-p5)

[Sketch webGL:1 ratio:1 draw:`(p5) => () => {
  const frame = p5.frameCount;
  p5.background(250);
  p5.rotateY(frame * 0.01);

  for(var j = 0; j < 5; j++){
    p5.push();
    for(var i = 0; i < 80; i++){
      p5.translate(
        p5.sin(frame * 0.001 + j) * 100,
        p5.sin(frame * 0.001 + j) * 100,
        i * 0.1
      );
      p5.rotateZ(frame * 0.002);
      p5.push();
      p5.sphere(8, 6, 4);
      p5.pop();
    }
    p5.pop();
  }
}` /]

```

[Sketch webGL:1 ratio:1 draw:`(p5) => () => {
  const frame = p5.frameCount;
  p5.background(250);
  p5.rotateY(frame * 0.01);

  for(var j = 0; j < 5; j++){
    p5.push();
    for(var i = 0; i < 80; i++){
      p5.translate(
        p5.sin(frame * 0.001 + j) * 100,
        p5.sin(frame * 0.001 + j) * 100,
        i * 0.1
      );
      p5.rotateZ(frame * 0.002);
      p5.push();
      p5.sphere(8, 6, 4);
      p5.pop();
    }
    p5.pop();
  }
}` /]
```

(WebGL example taken from [p5js examples website](https://p5js.org/examples/3d-sine-cosine-in-3d.html))

To embed a sketch, we have to use [instance mode](https://github.com/processing/p5.js/wiki/Global-and-instance-mode). The code is passed as a string representing the *function body* of an instance mode sketch. So:

```js
function sketch(p5){
  p5.setup = () => { /* setup code */  };
  p5.draw = () => { /* draw code */ };
  // etc.
}
```

Becomes:

```
[Sketch
  setup:`(p5, options) => () => {
    /* DO NOT USE createCanvas here! */
  }`
  draw:`(p5, options) => () => {
    /* draw code */
  }`
/]
```


There are a few more subtle differences with regular p5 code, and a few added conveniences to play nice with idyll. First, the Sketch component handles the sketch size. That is probably worth emphasizing:

**IMPORTANT: DO NOT USE** `createCanvas` **in p5.setup!** The size depends on the container that holds the sketch, and the Sketch component handles this logic. This is explained in more detail below, at *Sketch size and ratio*.

Because this function body does not have access to the global browser scope, it is passed variables via the options parameter to make life  little easier:

- `width` and `height`, which work like the normal p5 width/height. Note that this means you can use them before `setup()`. See _"Size and ratio"_ below
- `sketchProps`, which can be used to pass idyll variables to the sketch. To listen to changes in these props, define a `p5.receiveProps(sketchProps)` function.
- `devicePixelRatio`, which matches `window.devicePixelRatio`. Useful in case you want to respond to zoom- or high density display-related effect on the pixels.
- `updates`, use this function to trigger an update to an Idyll variable

```
[Sketch draw:`(p5, { width, height }) => () => { /* draw code */ }` /]
```

any variables that are defineed in the Idyll document are automatically in the scope of the sketch function. So

```
[var name:"x" value:10 ]
[Sketch draw:`(p5, { width, height }) => () => {
  // you can reference x here
  const xSquared = x * x;
}` /]
```

The sketch unmounts and resets in response to resize events to keep a correct size. To try this out, resize the browser window, or switch between portrain/landscape if you are on mobile.

If the sketch needs to run specific code before unmounting the component, define an `unmount` function. If will be triggered just before the component unmounts.

[var name:"bgColor" value:5 /]
[var name:"lineColor" value:250 /]

[Sketch
  draw:`(p5, { width, height }) => {
    let size = 25;
    return () => {
      p5.fill(bgColor, 16);
      p5.noStroke();
      p5.rect(0, 0, width, height);
      size = 40 + 10*p5.sin(p5.frameCount * p5.PI / 60);
      p5.stroke(lineColor);
      p5.strokeWeight(size);
      p5.line(p5.mouseX, p5.mouseY, p5.pmouseX, p5.pmouseY);
    };
}` /]

Background Color: [Range min:0 max:255 value:bgColor /]
Line Color: [Range min:0 max:255 value:lineColor /]

Code for the above demo:

```

[var name:"bgColor" value:5 /]
[var name:"lineColor" value:250 /]

[Sketch
  draw:`(p5, { width, height }) => {
    let size = 25;
    return () => {
      p5.fill(bgColor, 16);
      p5.noStroke();
      p5.rect(0, 0, width, height);
      size = 40 + 10*p5.sin(p5.frameCount * p5.PI / 60);
      p5.stroke(lineColor);
      p5.strokeWeight(size);
      p5.line(p5.mouseX, p5.mouseY, p5.pmouseX, p5.pmouseY);
    };
}` /]

Background Color: [Range min:0 max:255 value:bgColor /]
Line Color: [Range min:0 max:255 value:lineColor /]
```

# Sketch size and ratio

By default, the width of the sketch is equal to column width of the text, and height will be half of the width.

You can pass a value to `width` and `height` to override this. The value can be the number of pixels like `100`, or a CSS-valid string like `"50%"` or `"2em"`.

By default, height depends on width, but width does not depend on height. Passing a value to `width` will make `height` half of the new width. Passing a value to `height` will not affect `width`, which will still be as wide as the text column.

To enforce a ratio, you can pass a number to `ratio`, i.e. the expression ``` ratio:`3/1` ``` will produce a sketch with a width three times the height.

 If no width is defined, but a height is, width depends on height (as you can see below, this part is still a bit buggy). If a ratio, width and height are defined, height is overridden to depend on width.

[var name:"sketch_ratio_setup" value:`(p5) => () => { p5.noLoop(); };`  /]
[var name:"sketch_ratio_draw" value:`(p5) => () => { p5.background(0); }`  /]

[Sketch
  setup:sketch_ratio_setup
  draw:sketch_ratio_draw /]

[Sketch
  ratio:`4/1`
  setup:sketch_ratio_setup
  draw:sketch_ratio_draw /]

[Sketch
  height:50
  setup:sketch_ratio_setup
  draw:sketch_ratio_draw /]

[Sketch
  ratio:`2/1`
  width:"50%"
  setup:sketch_ratio_setup
  draw:sketch_ratio_draw /]

[Sketch
  ratio:`2/1`
  width:200
  height:200
  setup:sketch_ratio_setup
  draw:sketch_ratio_draw /]

[Sketch
  ratio:`2/1`
  height:50
  setup:sketch_ratio_setup
  draw:sketch_ratio_draw /]

```

[var name:"sketch_ratio_setup" value:`(p5) => () => { p5.noLoop(); };`  /]
[var name:"sketch_ratio_draw" value:`(p5) => () => { p5.background(0); }`  /]

[Sketch
  setup:sketch_ratio_setup
  draw:sketch_ratio_draw /]

[Sketch
  ratio:`4/1`
  setup:sketch_ratio_setup
  draw:sketch_ratio_draw /]

[Sketch
  height:50
  setup:sketch_ratio_setup
  draw:sketch_ratio_draw /]

[Sketch
  ratio:`2/1`
  width:"50%"
  setup:sketch_ratio_setup
  draw:sketch_ratio_draw /]

[Sketch
  ratio:`2/1`
  width:200
  height:200
  setup:sketch_ratio_setup
  draw:sketch_ratio_draw /]

[Sketch
  ratio:`2/1`
  height:50
  setup:sketch_ratio_setup
  draw:sketch_ratio_draw /]
```

# Manually triggered resets
A `watchedVal` triggers a reset of the sketch whenever the value it watches is changed:
[var name:"resetSketch" value:0 /]

[Sketch
  height:100
  watchedVal:resetSketch
  draw:`(p5, {width, height}) => {
  let x = width/2, y = height/2, dx = 0;

  return () => {
    p5.fill(0, 4);
    p5.noStroke();
    p5.rect(0, 0, width, height);
    p5.stroke(256);
    const dx_scaled = dx / (1<<4);
    p5.strokeWeight(20 + dx_scaled);
    p5.line(x, y, x+dx_scaled, y);
    x = (x+dx_scaled)%width;
    p5.line(x-dx_scaled, y, x, y);
    dx++;
  };
 }` /]
[Button onClick:`resetSketch++`]Reset Sketch![/Button]

```
[var name:"resetSketch" value:0 /]

[Sketch
  height:100
  watchedVal:resetSketch
  draw:`(p5, {width, height}) => {
  let x = width/2, y = height/2, dx = 0;

  return () => {
    p5.fill(0, 4);
    p5.noStroke();
    p5.rect(0, 0, width, height);
    p5.stroke(256);
    const dx_scaled = dx / (1<<4);
    p5.strokeWeight(20 + dx_scaled);
    p5.line(x, y, x+dx_scaled, y);
    x = (x+dx_scaled)%width;
    p5.line(x-dx_scaled, y, x, y);
    dx++;
  };
 }` /]
[Button onClick:`resetSketch++`]Reset Sketch![/Button]
```